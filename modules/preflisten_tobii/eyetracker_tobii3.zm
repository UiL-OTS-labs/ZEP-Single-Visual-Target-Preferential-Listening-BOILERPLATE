/******************************************************************************\
FILE:           eyetracker_tobii3.zm
AUTHOR:         Theo Veenker (UiL-OTS) <T.J.G.Veenker@uu.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides an interface to the Tobii eye-tracker. This version uses images for
the targets and sounds are played on various events. Also the experimenter
must hit <Enter> to end the target attention mode and enter the focus mode.


HISTORY:
2012-11-10 TV   Created.

\******************************************************************************/

plugin zep_eyetrk;
plugin zep_file;


enum EyeTrkMessage
{
    DRIFT_CHECK_DONE,
    RECALBIRATE,
    RECORDING_DONE,
}


TobiiEyeTracker eyetracker
{
    init()
    {
        // Optimal distance and range from eye to eye-tracker camera.
        // These values are only used in camera setup display.
//      optimal_eye_to_camera_distance  = 600;          // mm
//      eye_to_camera_range             = 500;          // mm

        // The following attributes define appearance of calibration targets.

//      attention_target_duration       = 1000ms;
//      wakeup_target_duration          = 1000ms;
        focus_target_duration           = 1000ms;

//      default_target_line_color       = color:black;
//      default_target_color            = color:red;
//      wakeup_target_color             = color:yellow;

        attention_target_image          = stimuli_dir() + "images/baby.svg";
        focus_target_image              = stimuli_dir() + "images/baby.svg";
        wakeup_target_image             = stimuli_dir() + "images/sun.svg";
        setup_target_image              = stimuli_dir() + "images/doll.svg";
        test_image                      = zep_dir() + "data/images/homer.png";

        min_target_size                 = 20;
        max_target_size                 = 150;
        setup_target_size               = 150;
//      target_size_mod                 = 0.2;
//      target_size_mod_freq            = 1;
//      target_wiggle_mod               = 0.05;
//      target_wiggle_mod_freq          = 4;

//      simulated_gaze_noise            = 0.01;
    }


    on_event:connected()
    {
        // Calibration type.
        calibration_type                = CALIB_TYPE_5A;

        // Calibration target distance from screen edge. Specify as normalized 
        // screen coordinates.
//      calibration_target_origin_x     = 0.08;
//      calibration_target_origin_y     = 0.08;

        // Calibration result analysis parameters. The quality of a single 
        // calibration point can be bad (i.e. failed), poor, fair or good.
        // To determine the quality of a calibration target we do this:
        //   let N be the number of valid gaze samples collected by the 
        //   eye-tracker for given target and let E be the average distance
        //   (i.e. error) from the target,
        //   then if N = 0 -> bad/failed
        //   otherwise if N <= calibration_min_samples    -> poor
        //   otherwise if E > calibration_max_error_fair  -> poor
        //   otherwise if E > calibration_max_error_good  -> fair
        //   otherwise -> good
//      calibration_min_samples         = 2;
//      calibration_max_error_fair      = 10.0/300.0;   // 10mm/300mm
//      calibration_max_error_good      = 5.0/300.0;    // 5mm/300mm

        // For infants you may want to trigger calibration targets manually.
        manual_calibration              = true;

        // Dwell-time gaze analyzer settings. 
        //   recommended settings for picture stimuli:       50px, 200ms
        //   recommended settings for text stimuli:          20px, 40ms
        //   recommended settings for mixed content stimuli: 30px, 100ms
//      analyzer_max_fixation_radius    = 30;
//      analyzer_min_fixation_duration  = 100ms;

        // Fixation update interval.
//      fixation_update_interval        = 50ms;
    }


    // Called on entering the camera setup menu.
    on_event:camera_setup_begin()
    {
        // Play a sound 3 times with 2s interval.
        sound_playback.play(stimuli_dir() + "sounds/baby_gigl.wav", 
            now() + 1000ms, 2000ms, 3);
    }


    // Called on continuing with camera setup after the participant has been
    // presented a wake-up image/sound.
    on_event:camera_setup_cont()
    {
        // Play a sound 3 times with 2s interval.
        sound_playback.play(stimuli_dir() + "sounds/baby_gigl.wav", 
            now() + 1000ms, 2000ms, 3);
    }


    // Called on entering the attention getting phase of the calibration 
    // target display.
    on_event:attention_begin()
    {
        // Play two sounds repeatedly with 250ms intervals.
        sound_playback2.play(stimuli_dir() + "sounds/melody_high.wav", 
            stimuli_dir() + "sounds/melody_low.wav", 
            now() + 10ms, 250ms, -1);
    }


    // Called on continuing with the attention getting phase after the 
    // participant has been presented a wake-up image/sound.
    on_event:attention_cont()
    {
        // Play two sounds repeatedly with 250ms intervals.
        sound_playback2.play(stimuli_dir() + "sounds/melody_high.wav", 
            stimuli_dir() + "sounds/melody_low.wav", 
            now() + 10ms, 250ms, -1);
    }


    // Called on entering the focus-in phase of the calibration target display.
    on_event:focus_begin()
    {
        // Play a sound.
        sound_playback.play(stimuli_dir() + "sounds/squeeky.wav", 
            now() + 10ms, 25ms, 2);
    }


    // Called on entering the final phase of the calibration target display.
    on_event:final_begin()
    {
    }


    // Called on continuing with the final phase after the participant has 
    // been presented a wake-up image/sound.
    on_event:final_cont()
    {
    }


    // Called at start of a participant wake-up signal.
    on_event:wakeup_begin()
    {
        // Play a sound.
        sound_playback.abort();
        sound_playback2.abort();
        sound_playback.play(stimuli_dir() + "sounds/baby_laugh.wav", 
            now() + 10ms);
    }


    // Called when a calibration target is removed.
    on_event:target_end()
    {
        // Kill any sound if still playing.
        sound_playback.abort();
        sound_playback2.abort();
    }


    on_event:drift_check_done()
    {
//      signal_target(DRIFT_CHECK_DONE);
    }


    on_event:drift_check_fail()
    {
//      signal_target(RECALBIRATE);
    }


    on_event:drift_check_abort()
    {
//      signal_target(RECALBIRATE);
    }


    on_event:tracking_done()
    {
        control.hide_gaze();
        control.hide_fixation();

//      signal_target(RECORDING_DONE);
    }


    on_event:tracking_fail()
    {
        control.hide_gaze();
        control.hide_fixation();

//      signal_target(RECORDING_DONE);
    }


    on_event:tracking_abort()
    {
        control.hide_gaze();
        control.hide_fixation();

//      signal_target(RECORDING_DONE);
    }


    on_event:gaze_sample()
    {
        // Reported eye positions are relative to the test window.

        if (!gaze_ignore)
        {
            control.show_gaze(
                gaze_left_x / test_window1.width, 
                gaze_left_y / test_window1.height);
        }
        else
        {
            control.hide_gaze();
        }

        test_page.response.check_gaze_position(gaze_left_x, gaze_left_y, 
            gaze_time);
    }


    on_event:fixation_start()
    {
        control.show_fixation(
            fixation_x / test_window1.width, 
            fixation_y / test_window1.height);
    }


    on_event:fixation_end()
    {
        control.hide_fixation();
    }


    on_event:fixation_update()
    {
        control.show_fixation(
            fixation_x / test_window1.width, 
            fixation_y / test_window1.height);
    }


    on_event:blink_start()
    {
        control.hide_gaze();
        control.hide_fixation();
    }


    on_event:blink_end()
    {
    }


    on_event:proceed()
    {
        signal_target(CONTINUE);
        target = null;
    }


    bool handle_key(char key, int modifiers)
    {
        // Process latest key press event.
        if (handle_key_press()) 
            return true;

        // Check for F7/F8 and Ctrl+F7/F8 to toggle gaze/fixation display on 
        // control window or test window.
        if (key == KEY_F7) 
        {
            if (modifiers == INPUT_MOD_CONTROL)
            {
                show_gaze = !show_gaze;
                return true;
            }
            else if (modifiers == 0)
            {
                control.toggle_show_gaze();
                return true;
            }
        }
        else if (key == KEY_F8)
        {
            if (modifiers == INPUT_MOD_CONTROL)
            {
                show_fixations = !show_fixations;
                return true;
            }
            else if (modifiers == 0)
            {
                control.toggle_show_fixations();
                return true;
            }
        }
        
        return false;
    }
}
